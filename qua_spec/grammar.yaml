#
# A type can be one of:
#
$schema: https://qualang.io/2021.1/ast.schema.json#
version: 0.0.1

imports:
  - config

enums:
  QuaPrimitiveType:
    - Int
    - Fixed
    - Boolean
    
  UnaryOperator:
    - NEG
    - NOT

  BinaryOperator:
    - ADD
    - SUB
    - MULT
    - DIV
    # binary operators
    - AND
    - OR
    - XOR
    # comparisons
    - LT
    - LET
    - GT
    - GET
    - EQ
    # shifts
    - SHL
    - SHR

  ChirpUnit:
    - HzPerNanoSec
    - mHzPerNanoSec
    - uHzPerNanoSec
    - nHzPerNanoSec
    - pHzPerNanoSec

unions:
  AnyStatement:
    - AssignmentStatement
    - SaveStatement
    - ForStatement
    - WhileStatement
    - IfStatement
    - BreakStatement
    - ContinueStatement
    - SwitchStatement
    - SequenceStatement
    - PlayStatement
    - WaitStatement
    - ParallelStatement
    - AlignStatement
    - WaitForTriggerStatement

  LiteralExpression:
    - LiteralFixedExpression
    - LiteralIntegerExpression
    - LiteralBooleanExpression

  AnyExpression:
    - VarRefExpression
    - ArrayCellExpression
    - IORefExpression
    - LiteralExpression
    - BinaryExpression
    - UnaryExpression
    - LibFunctionExpression
    
  AnyTargetExpression:
    - VarRefExpression
    - ArrayCellExpression
    - IORefExpression
    
  AnyIterableExpression:
    - VarRefExpression
    - RangeExpression

  PlayPart:
    - AnalogPlayPart
    - DigitalPlayPart

  AnyAnalogPulse:
    - AnalogPulseReference
    - RampPulse
    
types:

  Program:
    script: Script
    config: Config

  Script:
    variables: [ VariableDeclaration ]
    body: BlockStatement

  BlockStatement:
    statements: [ AnyStatement ]

  VariableDeclaration:
    name: string
    type: QuaPrimitiveType
    size: [ number ]
    values: [ LiteralExpression ]
    $validations:
      non_empty_name:
        rule: length(node.name) > `1`
        description: |
          `name` must be non empty string
      size_gte_1:
        description: |
          `size` must be 1 or greater
      size_is_whole:
        description: |
          `size` is a whole number without fraction part
      all_values_same_type:
        description: all `values` have the same type
      literal_value_type_match_to_type_field:
        description: |
          `values` has the same type as `type`
      values_length_match_size:
        description: |
          `values` length is the same size as `size`


  ########################## STATEMENTS

  AssignmentStatement:
    lhs: AnyTargetExpression
    rhs: AnyExpression
    
  SaveStatement:
    source: AnyExpression
    target: SaveTargetReference
  
  VarIterablePair:
    variable: VarRefExpression
    values: VarRefExpression
    $validations:
      variable_scalar: "`variable` must be a scalar variable"
      values_array: "`values` must be an array of values"
      match_types: "`variable` type must match the items type of `values`"
  
  ForStatement:
    pairs: [VarIterablePair]
    body: [AnyStatement]
    $validations:
      size_of_iterator_is_one: "size of `iterator` is one"
      
  WhileStatement:
    condition: AnyExpression
    body: [AnyStatement]
    $validations:
      condition_is_boolean: "`condition` expression is boolean"
    
  IfStatement:
    condition: AnyExpression
    body: [AnyStatement]
    else_if: [ElseIfPart]
    else_body: [AnyStatement]
    $validations:
      condition_is_boolean: "`condition` expression is boolean"

  ElseIfPart:
    condition: AnyExpression
    body: [AnyStatement]
    $validations:
      condition_is_boolean: "`condition` expression is boolean"

  BreakStatement: 
    $validations:
      break_inside_loop: "`break` statement is inside a loop"
      
  ContinueStatement: 
    $validations:
      break_inside_loop: "`continue` statement is inside a loop"

  SwitchStatement:
    expression: AnyExpression
    cases: [CasePart]
    default: [AnyStatement]
  
  CasePart:
    case: AnyExpression
    body: [AnyStatement]
    $validations:
      case_type_match_switch_expression_type: "case type match switch expression type"
      
  SequenceStatement:
    body: [AnyStatement]
    
  AmpMultiplier:
    v00: AnyExpression
    v01: AnyExpression
    v10: AnyExpression
    v11: AnyExpression
    
  Chirp:
    rate: ChirpRates
    unit: ChirpUnit
    
  ChirpRates:
    rate: AnyExpression
    time: number

  RampPulse:
    slope: AnyExpression
    base: AnyExpression

  AnalogPlayPart:
    pulse: AnyAnalogPulse
    output: AnalogOutputReference
    oscilator: OscilatorReference
    chirp: Chirp
    ampliutude: AmpMultiplier

  DigitalPlayPart:
    waveform: DigitalWaveformReference
    output: DigitalOutputReference
    route: DigitalRouteReference
  
  PlayStatement:
    plays: [PlayPart]
    duration: AnyExpression
    condition: AnyExpression
    truncate: AnyExpression
  
  WaitStatement:
    time: AnyExpression

  ParallelStatement:
    threads: [ThreadPart]
    
  ThreadPart:
    name: string
    body: [AnyStatement]
    
  AlignStatement:
    threads: [ ThreadReference ]

  PauseStatement: {}

  WaitForTriggerStatement:
    input: DigitalInputReference
    plays: [PlayPart]



  ########################## EXPRESSIONS


  VarRefExpression:
    variable: string
    
  ArrayCellExpression:
    array: VarRefExpression
    index: AnyExpression
    $validations:
      integer: "`index` must be an integer expression"

  IORefExpression:
    io: number
    $validations:
      integer: "`io` must be an integer value"
      gt0: "`io` must be greater than 0"

  LiteralFixedExpression:
    value: number

  LiteralIntegerExpression:
    value: number

  LiteralBooleanExpression:
    value: boolean

  BinaryExpression:
    op: BinaryOperator
    left: AnyExpression
    right: AnyExpression
    
  UnaryExpression:
    op: UnaryOperator
    operand: AnyExpression
    
  LibFunctionExpression:
    library_name: string
    function_name: string
    positioned_arguments: [AnyExpression]

  RangeExpression:
    from: AnyExpression
    to: AnyExpression
    step: AnyExpression


  ######################### REFERENCES


  SaveTargetReference:
    tag: string
    
  AnalogPulseReference:
    name: string
    
  AnalogOutputReference:
    name: string

  DigitalWaveformReference:
    name: string

  DigitalOutputReference:
    name: string

  DigitalInputReference:
    name: string

  DigitalRouteReference:
    name: string
    
  OscilatorReference:
    name: string
    
  ThreadReference:
    name: string